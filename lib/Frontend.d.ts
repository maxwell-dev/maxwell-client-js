import IAction from "./IAction";
import Listenable from "./Listenable";
import { OnAction, OnMsg } from "./types";
import ConnectionManager from "./ConnectionManager";
import Options from "./Options";
import { Msg, Offset } from "./types";
import IHeaders from "./IHeaders";
export declare class Frontend extends Listenable {
    private _endpoints;
    private _connectionManager;
    private _options;
    private _subscriptionManager;
    private _queueManager;
    private _onMsgs;
    private _pullTasks;
    private _onActions;
    private _watchActions;
    private _connection;
    private _endpointIndex;
    private _condition;
    constructor(endpoints: string[], connectionManager: ConnectionManager, options: Options);
    close(): void;
    subscribe(topic: string, offset: Offset, onMsg: OnMsg): void;
    unsubscribe(topic: string): void;
    get(topic: string, offset: Offset, limit: number): Msg[];
    commit(topic: string, offset: Offset): void;
    receive(topic: string, offset: Offset, limit: number): Msg[];
    do(action: IAction, headers?: IHeaders): Promise<any>;
    watch(actionType: string, onAction: OnAction): void;
    unwatch(actionType: string): void;
    private _connectToFrontend;
    private _disconnectFromFrontend;
    private _onConnectToFrontendDone;
    private _onConnectToFrontendFailed;
    private _onDisconnectFromFrontendDone;
    private _isConnectionOpen;
    private _resolveEndpoint;
    private _nextEndpoint;
    private _renewAllTask;
    private _newPullTask;
    private _deletePullTask;
    private _deleteAllPullTasks;
    private _isValidSubscription;
    private _ensureWatched;
    private _ensureUnwatched;
    private _rewatch_all;
    private _onAction;
    private _waitAndRequest;
    private _createPullReq;
    private _createDoReq;
    private _createWatchReq;
    private _createUnwatchReq;
}
export default Frontend;
