import Options from "./Options";
import Listenable from "./Listenable";
import PromisePlus from "./PromisePlus";
import { ProtocolMsg } from "./types";
export declare class Connection extends Listenable {
    private _endpoint;
    private _options;
    private _shouldRun;
    private _heartbeatTimer;
    private _reconnectTimer;
    private _sentAt;
    private _lastRef;
    private _attachments;
    private _condition;
    private _websocket;
    constructor(endpoint: string, options: Options);
    close(): void;
    isOpen(): boolean;
    waitUntilOpen(): Promise<void>;
    getEndpoint(): string;
    request(msg: ProtocolMsg, timeout?: number): PromisePlus;
    send(msg: ProtocolMsg): void;
    private _onOpen;
    private _onClose;
    private _onMsg;
    private _onError;
    private _connect;
    private _disconnect;
    private _reconnect;
    private _stopReconnect;
    private _repeatSendHeartbeat;
    private _stopSendHeartbeat;
    private _sendHeartbeat;
    private _hasSentHeartbeat;
    private _createPingReq;
    private _newRef;
    private _now;
    private _buildUrl;
    private _deleteAttachment;
}
export default Connection;
